name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - uses: actions/checkout@v3

      # Step 2: Install Rust using actions-rs
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # Step 3: Install Dojo Engine with detailed debugging
      - name: Install Dojo Engine
        run: |
          # Create temporary directory for installation
          mkdir -p /tmp/dojo-install
          cd /tmp/dojo-install
          
          # Download installer with curl and show progress
          echo "Downloading Dojo installer..."
          curl -L https://install.dojoengine.org -o install-dojo.sh --progress-bar
          
          # Make installer executable
          chmod +x install-dojo.sh
          
          # Show installer contents
          echo "Installer contents:"
          cat install-dojo.sh
          
          # Run installer with bash explicitly and debug output
          echo "Running installer..."
          bash -x ./install-dojo.sh
          
          # Create Dojo directory if it doesn't exist
          mkdir -p $HOME/.dojo/bin
          
          # Verify installation
          echo "Verifying installation..."
          ls -la $HOME/.dojo
          ls -la $HOME/.dojo/bin
          
          # Add to PATH
          echo "Adding to PATH..."
          export PATH="$HOME/.dojo/bin:$PATH"
          echo "PATH is now: $PATH"
          
          # Return to project directory
          cd $GITHUB_WORKSPACE

      # Step 4: Install Scarb
      - name: Install Scarb
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh -o install-scarb.sh
          chmod +x install-scarb.sh
          ./install-scarb.sh
          export PATH="$HOME/.scarb/bin:$PATH"

      # Step 5: Verify installations
      - name: Verify installations
        run: |
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "Dojo directory contents:"
          ls -la $HOME/.dojo || echo "Dojo directory not found"
          echo "Dojo bin contents:"
          ls -la $HOME/.dojo/bin || echo "Dojo bin directory not found"
          echo "Current PATH: $PATH"
          echo "Searching for sozo:"
          find $HOME -name sozo 2>/dev/null || echo "sozo not found in home directory"
          echo "Searching for katana:"
          find $HOME -name katana 2>/dev/null || echo "katana not found in home directory"

      # Step 6: Build with Sozo
      - name: Build with Sozo
        run: |
          export PATH="$HOME/.dojo/bin:$PATH"
          if [ -f "$HOME/.dojo/bin/sozo" ]; then
            echo "Found sozo binary, attempting to build..."
            $HOME/.dojo/bin/sozo build
          else
            echo "Error: sozo binary not found in $HOME/.dojo/bin"
            exit 1
          fi

      # Step 7: Upload debug information
      - name: Upload debug information
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: debug-info
          path: |
            /tmp/dojo-install/install-dojo.sh
            ${{ github.workspace }}/*.log
